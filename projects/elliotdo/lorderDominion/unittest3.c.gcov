        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:  Author:   Donald Elliott
        -:    3:  Class:    CS362-400
        -:    4:  Testing:  isGameOver()
        -:    5:*/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:
function main called 1 returned 100% blocks executed 82%
        -:   12:int main() {
        1:   13:  int success = 0;
        1:   14:  int failedTests = 0, totalTests = 0;
        1:   15:  int i, j = 0;
        1:   16:  int k[10] = {smithy, adventurer, village, mine, minion, steward, treasure_map, baron, feast, gardens};
        -:   17:  struct gameState G;
        1:   18:  initializeGame(2, k, 100, &G);
        1:   19:  printf("\nTesting isGameOver()\n");
        1:   20:  totalTests++;
        1:   21:  if (isGameOver(&G) == 0){
branch  0 taken 100%
branch  1 taken 0%
        1:   22:    printf("Game state at start of game should be 0.\n");
        1:   23:    printf("Game state tested: %d | Passed\n\n", isGameOver(&G));
        1:   24:  }
        -:   25:  else {
    #####:   26:    printf("Tested game state is wrong. | Failed\n");
    #####:   27:    success = 1;
    #####:   28:    failedTests++;
        -:   29:  }
        1:   30:  int provinces = G.supplyCount[province];
        1:   31:  int estates = G.supplyCount[estate];
        1:   32:  totalTests++;
        1:   33:  printf("Province size: %d. Game is not over.\n", G.supplyCount[province]);
        1:   34:  printf("Estate size: %d. Game is not over.\n", G.supplyCount[estate]);
        1:   35:  if (isGameOver(&G) == 0)
branch  0 taken 100%
branch  1 taken 0%
        1:   36:    printf("Test Passed\n\n");
        -:   37:  else {
    #####:   38:    printf("Test Failed\n\n");
    #####:   39:    success = 1;
    #####:   40:    failedTests++;
        -:   41:  }
        1:   42:  G.supplyCount[province] = 0;
        1:   43:  G.supplyCount[estate] = 0;
        1:   44:  totalTests++;
        1:   45:  printf("Province size: %d. Game is over.\n", G.supplyCount[province]);
        1:   46:  printf("Estate size: %d. Game is over.\n", G.supplyCount[estate]);
        1:   47:  if (isGameOver(&G) == 1)
branch  0 taken 100%
branch  1 taken 0%
        1:   48:    printf("Test Passed\n\n");
        -:   49:  else {
    #####:   50:    printf("Test Failed\n\n");
    #####:   51:    success = 1;
    #####:   52:    failedTests++;
        -:   53:  }
        1:   54:  G.supplyCount[province] = provinces;
        1:   55:  G.supplyCount[estate] = estates;
       52:   56:  for (i = 0; i < 25; i++) {
branch  0 taken 96%
branch  1 taken 4%
       25:   57:    if(G.supplyCount[i] != 0)
branch  0 taken 100%
branch  1 taken 0%
       25:   58:      j++;
       25:   59:  }
        1:   60:  totalTests++;
        1:   61:  if (j >= 22) {
branch  0 taken 100%
branch  1 taken 0%
        1:   62:    printf("Supplies aren't empty - %d.\n", j);
        1:   63:    printf("Game is not over.\n");
        1:   64:    if (isGameOver(&G) == 0)
branch  0 taken 100%
branch  1 taken 0%
        1:   65:      printf("Test Passed\n\n");
        -:   66:    else {
    #####:   67:      printf("Test Failed\n\n");
    #####:   68:      success = 1;
    #####:   69:      failedTests++;
        -:   70:    }
        1:   71:  }
        1:   72:  j = 0;
        8:   73:  for (i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25%
        3:   74:    G.supplyCount[i] = 0;
        3:   75:    j++;
        3:   76:  }
        1:   77:  totalTests++;
        1:   78:  if (j <= 3) {
branch  0 taken 100%
branch  1 taken 0%
        1:   79:    printf("Supplies were emptied - %d.\n", j);
        1:   80:    printf("Game is over.\n");
        1:   81:    if (isGameOver(&G) == 1)
branch  0 taken 100%
branch  1 taken 0%
        1:   82:      printf("Test Passed\n");
        -:   83:    else {
    #####:   84:      printf("Test Failed\n");
    #####:   85:      success = 1;
    #####:   86:      failedTests++;
        -:   87:    }
        1:   88:  }
        1:   89:  if (success == 0)
branch  0 taken 100%
branch  1 taken 0%
        1:   90:    printf("\n%d OF 5 TESTS PASSED.\n\n", totalTests - failedTests);
        -:   91:  else
    #####:   92:    printf("\n%d OF 5 TESTS FAILED.\n\n", failedTests);
        1:   93:  return 0;
        -:   94:}
