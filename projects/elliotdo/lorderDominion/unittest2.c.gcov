        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:  Author:   Donald Elliott
        -:    3:  Class:    CS362-400
        -:    4:  Testing:  fullDeckCount()
        -:    5:*/
        -:    6:
        -:    7:#include "interface.h"
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include "rngs.h"
        -:   13:
function main called 1 returned 100% blocks executed 70%
        -:   14:int main() {
        1:   15:  printf("\nTesting fullDeckCount()\n");
        1:   16:  int testCount = 0;
        1:   17:  int failCount = 0;
        -:   18:  struct gameState G;
        1:   19:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   20:              remodel, smithy, village, baron, great_hall};
        1:   21:  initializeGame(2, k, 100, &G);
        -:   22:
        -:   23:  // Setup empty deck test
        -:   24:  int h1[0];
        -:   25:  int d1[0];
        -:   26:  int td1[0];
        1:   27:  memcpy(G.hand[0], h1, 0);
        1:   28:  memcpy(G.deck[0], d1, 0);
        1:   29:  memcpy(G.discard[0], td1, 0);
        1:   30:  G.handCount[0] = 0;
        1:   31:  G.deckCount[0] = 0;
        1:   32:  G.discardCount[0] = 0;
        1:   33:  printf("Testing for an empty deck.");
        1:   34:  int result = fullDeckCount(0, copper, &G);
        1:   35:  if (result == 0) {
branch  0 taken 100%
branch  1 taken 0%
        1:   36:    printf(" Passed\n");
        1:   37:    testCount++;
        1:   38:  }
        -:   39:  else {
    #####:   40:    printf("Failed\n");
    #####:   41:    printf("Found %d instead of 0\n", result);
    #####:   42:    testCount++;
    #####:   43:    failCount++;
        -:   44:  }
        -:   45:
        -:   46:  //Setup next 3 tests for coppers, silvers, and gold
        1:   47:  int h2[5] = {copper, silver, gold, silver, copper};
        1:   48:  memcpy(G.hand[0], h2, 5 * sizeof(int));
        1:   49:  G.handCount[0] = 5;
        1:   50:  int d2[7] = {copper, silver, copper, copper, gold, copper, copper};
        1:   51:  memcpy(G.deck[0], d2, 7 * sizeof(int));
        1:   52:  G.deckCount[0] = 7;
        1:   53:  int td2[3] = {copper, silver, copper};
        1:   54:  memcpy(G.discard[0], td2, 3 * sizeof(int));
        1:   55:  G.discardCount[0] = 3;
        -:   56:
        -:   57:  //Silver test
        1:   58:  printf("Testing for 4 silvers in deck.");
        1:   59:  result = fullDeckCount(0, silver, &G);
        1:   60:  if (result == 4) {
branch  0 taken 100%
branch  1 taken 0%
        1:   61:    printf(" Passed\n");
        1:   62:    testCount++;
        1:   63:  }
        -:   64:  else {
    #####:   65:    printf("Failed.\n");
    #####:   66:    printf("Found %d instead of 4\n", result);
    #####:   67:    testCount++;
    #####:   68:    failCount++;
        -:   69:  }
        -:   70:
        -:   71:  //Copper test
        1:   72:  printf("Testing for 9 coppers in deck.");
        1:   73:  result = fullDeckCount(0, copper, &G);
        1:   74:  if (result == 9) {
branch  0 taken 100%
branch  1 taken 0%
        1:   75:    printf(" Passed\n");
        1:   76:    testCount++;
        1:   77:  }
        -:   78:  else {
    #####:   79:    printf("Failed.\n");
    #####:   80:    printf("Found %d instead of 9\n", result);
    #####:   81:    testCount++;
    #####:   82:    failCount++;
        -:   83:  }
        -:   84:
        -:   85:  //Gold test
        1:   86:  printf("Testing for 2 golds in deck.");
        1:   87:  result = fullDeckCount(0, gold, &G);
        1:   88:  if (result == 2) {
branch  0 taken 100%
branch  1 taken 0%
        1:   89:    printf(" Passed\n");
        1:   90:    testCount++;
        1:   91:  }
        -:   92:  else {
    #####:   93:    printf("Failed.\n");
    #####:   94:    printf("Found %d instead of 2\n", result);
    #####:   95:    testCount++;
    #####:   96:    failCount++;
        -:   97:  }
        -:   98:
        -:   99:  // Output what passed or failed.
        1:  100:  if (failCount == 0)
branch  0 taken 100%
branch  1 taken 0%
        1:  101:    printf("4 OF 4 TESTS PASSED.\n");
        -:  102:  else
    #####:  103:    printf("%d OF 4 TESTS PASSED.\n", testCount - failCount);
        1:  104:  return 0;
        -:  105:}
