        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:  Author:   Donald Elliott
        -:    3:  Class:    CS362-400
        -:    4:  Testing:  buyCard()
        -:    5:*/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:
function main called 1 returned 100% blocks executed 75%
        -:   12:int main() {
        1:   13:  int passed = 0;
        1:   14:  int p1 = 1;
        -:   15:  // Make sure we have enough money to buy a silver.
        1:   16:  int money1 = 4;
        1:   17:  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, great_hall};
        -:   18:  struct gameState G;
        1:   19:  initializeGame(2, k, 100, &G);
        -:   20:
        -:   21:  //Start test
        1:   22:  printf("\nTesting buyCard()\n");
        1:   23:  G.whoseTurn = p1;
        1:   24:  G.coins = money1;
        1:   25:  buyCard(silver, &G);
        1:   26:  printf("Player 1 bought silver.\n");
        1:   27:  printf("Top of discard: %d.\n", G.discard[G.whoseTurn][G.discardCount[G.whoseTurn]]);
        1:   28:  if (G.discard[G.whoseTurn][G.discardCount[G.whoseTurn - 1]] == silver)
branch  0 taken 100%
branch  1 taken 0%
        1:   29:    printf("Test Passed\n");
        -:   30:  else {
    #####:   31:    printf("Test Failed\n");
    #####:   32:    passed = 1;
        -:   33:  }
        1:   34:  if (passed == 0)
branch  0 taken 100%
branch  1 taken 0%
        1:   35:    printf("1 test passed buyCard\n\n");
        -:   36:  else
    #####:   37:    printf("1 test failed buyCard\n\n");
        1:   38:  return 0;
        -:   39:}
