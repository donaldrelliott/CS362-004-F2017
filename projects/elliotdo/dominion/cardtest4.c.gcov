        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:  Author:   Donald Elliott
        -:    3:  Class:    CS362-400
        -:    4:  Testing:  council_room
        -:    5:*/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "interface.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
function main called 1 returned 100% blocks executed 68%
        -:   16:int main() {
        1:   17:  int passed = 0, failedTests = 0, totalTests = 0, p1 = 0;
        1:   18:  int p2 = 1;
        1:   19:  int position = 0, c1 = 0, c2 = 0, c3 = 0, bonus = 0;
        1:   20:  int k[10] = { smithy, adventurer, village, mine, minion, steward, treasure_map, council_room, feast, gardens };
        -:   21:  struct gameState G, test;
        1:   22:  initializeGame(2, k, 100, &G);
        -:   23:
        1:   24:  printf("Testing council_room card\n");
        -:   25:
        1:   26:  memcpy(&test, &G, sizeof(struct gameState));
        1:   27:  totalTests++;
        1:   28:  printf("Hand count: %d\n", test.handCount[p1]);
        1:   29:  printf("Correct: %d\n", G.handCount[p1]);
        1:   30:  printf("Deck count: %d\n", test.deckCount[p1]);
        1:   31:  printf("Correct: %d\n", G.deckCount[p1]);
        2:   32:  if (test.handCount[p1] == G.handCount[p1] && test.deckCount[p1] == G.deckCount[p1])
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
        1:   33:    printf("Hand/deck have correct count | Test Passed\n");
        -:   34:  else {
    #####:   35:    printf("Hand/deck don't have correct count | Test Failed\n");
    #####:   36:    passed = 1;
    #####:   37:    failedTests++;
        -:   38:  }
        1:   39:  totalTests++;
        1:   40:  printf("\nPlayer buy count is %d\n", test.numBuys);
        1:   41:  printf("Correct: %d\n", G.numBuys);
        1:   42:  if (test.numBuys == G.numBuys)
branch  0 taken 100%
branch  1 taken 0%
        1:   43:    printf("Buy count has correct count | Test Passed\n");
        -:   44:  else {
    #####:   45:    printf("Buy count doesn't have correct acount | Test Failed\n");
    #####:   46:    passed = 1;
    #####:   47:    failedTests++;
        -:   48:  }
        1:   49:  cardEffect(council_room, c1, c2, c3, &test, position, &bonus);
        1:   50:  printf("\nHand/deck count after playing council_room card.\n");
        1:   51:  totalTests++;
        1:   52:  int newCards = 5;
        1:   53:  printf("Hand count is %d\n", test.handCount[p1]);
        1:   54:  printf("Correct: %d\n", G.handCount[p1] + newCards - 1);
        1:   55:  printf("Deck count is %d\n", test.deckCount[p1]);
        1:   56:  printf("Correct: %d\n", G.deckCount[p1] - newCards);
        1:   57:  if (test.handCount[p1] == G.handCount[p1] + newCards - 1 && test.deckCount[p1] == G.deckCount[p1] - newCards)
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:   58:    printf("Hand/deck have correct count | Test Passed\n");
        -:   59:  else {
        1:   60:    printf("Hand/deck don't have correct count | Test Failed\n");
        1:   61:    passed = 1;
        1:   62:    failedTests++;
        -:   63:  }
        1:   64:  totalTests++;
        1:   65:  printf("\nHand count: %d\n", test.handCount[p2]);
        1:   66:  printf("Correct: %d\n", G.handCount[p2] + 1);
        1:   67:  if (test.handCount[p2] == G.handCount[p2] + 1)
branch  0 taken 100%
branch  1 taken 0%
        1:   68:    printf("Hand/deck have correct count | Test Passed\n");
        -:   69:  else {
    #####:   70:    printf("Hand/deck don't have correct count | Test Failed\n");
    #####:   71:    passed = 1;
    #####:   72:    failedTests++;
        -:   73:  }
        1:   74:  printf("\nCheck player buy count after council_room is played.\n");
        1:   75:  totalTests++;
        1:   76:  printf("Player buy count: %d\n", test.numBuys);
        1:   77:  printf("Correct: %d\n", G.numBuys + 1);
        1:   78:  if (test.numBuys == G.numBuys + 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:   79:    printf("Buy count has correct count | Test Passed\n");
        -:   80:  else {
        1:   81:    printf("Buy count doesn't have correct count | Test Failed\n");
        1:   82:    passed = 1;
        1:   83:    failedTests++;
        -:   84:  }
        1:   85:  if (passed == 0)
branch  0 taken 0%
branch  1 taken 100%
    #####:   86:    printf("\n%d out of 5 tests passed\n\n", totalTests - failedTests);
        -:   87:  else
        1:   88:    printf("\n%d out of 5 tests passed\n\n", totalTests - failedTests);
        1:   89:  return 0;
        -:   90:}
